<?php
use Magento\Framework\App\Bootstrap;
include('app/bootstrap.php');
$bootstrap = Bootstrap::create(BP, $_SERVER);
$objectManager = $bootstrap->getObjectManager();
$state = $objectManager->get('Magento\Framework\App\State');
$store = $objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore();
$state->setAreaCode('frontend');

	$sku = 	testproducts; 
	if(!$sku) 
	{
        header("Location: ".$store->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB));
        exit;
	}
	
	
	$prod=$objectManager->get('\Magento\Catalog\Model\ProductFactory')->create();
	$p = $prod->loadByAttribute('sku',testproducts);
	
	if(!is_object($p) || strstr($sku, '-sample'))
		{
			header("Location: ".$store->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB));
			exit;
		}
	$name = $p->getName();

	//check if you already have the Sample product, then don\'t create new..
	$p = $prod->loadByAttribute('sku',$sku.'-sample');

	if(is_object($p))
        $pId = $p->getId();
	else
        $pId = false;
	
	if(!$pId) {
    $product = $objectManager->create('Magento\Catalog\Model\Product');
        try {
            $product->setWebsiteIds(array(1)) //website ID the product is assigned to, as an array
                    ->setAttributeSetId(4) //ID of a attribute set named 'default'
                    ->setTypeId('simple') 
                    ->setCreatedAt(strtotime('now')) 
                    ->setSku($sku.'-sample') //SKU
                    ->setName($name."-sample")
                    ->setWeight(4.0000)
					->setCategoryIds(7)
                    ->setStatus(1) 
                    ->setTaxClassId(4) //tax class (0 - none, 1 - default, 2 - taxable, 4 - shipping)
                    ->setVisibility(2) 
                    ->setPrice(0.99) 
                    ->setMetaTitle($prod->getMetaTitle())
                    ->setMetaKeyword($prod->getMetaKeyword())
                    ->setMetaDescription($prod->getMetaDescription())
                    ->setDescription($prod->getDescription())
                    ->setShortDescription($prod->getShortDescription())
                    ->setStockData(
                        array(
                           'use_config_manage_stock' => 0, //'Use config settings' checkbox
                           'manage_stock'=>1, //manage stock
                           'min_sale_qty'=>1, //Minimum Qty Allowed in Shopping Cart
                           'max_sale_qty'=>2, //Maximum Qty Allowed in Shopping Cart
                           'is_in_stock' => 1, //Stock Availability
                           'qty' => 99999 //qty
                        )
                    );

				echo "BEFORE SAVING THE NEW PRODUCT";
				$res = $product->save();
				echo "AFTER SAVING THE NEW PRODUCT";

				//var_dump($res); 
				echo $product->getEntityId();
				$ids=$product->getEntityId();
				// Save the new Sample Product ID to original product Attribute. 
			} catch (Exception $e ) {
				echo    $e->getMessage();
			}
		$cart = $objectManager->get('Magento\Checkout\Model\Cart');
		$productRepo = $objectManager->get('Magento\Catalog\Model\ProductRepository');
		 
		$productData = [];
		$productData['qty'] = 1; // input  here for quantity of product, for. e.g : 5
		$productData['product'] = $pId; // input product id here, for e.g : 1
		 
		$_addproduct = $productRepo->getById($pId);
		if ($_addproduct) {
			$cart->addProduct($_addproduct, $productData); // adds product in cart using cart model
		}
		$cart->save();
		$cart->getQuote()->setTotalsCollectedFlag(false)->collectTotals();
		$cart->getQuote()->save();

	}
	else
		
		
		
 
		$cart = $objectManager->get('Magento\Checkout\Model\Cart');
		$productRepo = $objectManager->get('Magento\Catalog\Model\ProductRepository');
		 
		$productData = [];
		$productData['qty'] = 1; // input  here for quantity of product, for. e.g : 5
		$productData['product'] = $pId; // input product id here, for e.g : 1
		 
		$_addproduct = $productRepo->getById($pId);
		if ($_addproduct) {
			$cart->addProduct($_addproduct, $productData); // adds product in cart using cart model
		}
		// $cart->save();
		// $cart->getQuote()->setTotalsCollectedFlag(false)->collectTotals();
		// $cart->getQuote()->save();
		
		$freeShipping = true;
		$items = $cart->getQuote()->getAllItems();
 
		foreach($items as $item) {
			$Skus=$item->getSku();
			if(!strstr($Skus, 'sam'))
			{
				$freeShipping = false;
				
			}
		}
		
		 if ($freeShipping == true) {
            $request->setFreeShipping(true);
        }
		
//header("Location: /checkout/cart/add/product/".$pId."/");
exit;

//echo "done";



?>




